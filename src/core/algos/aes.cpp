#include <cstdint>
#include <iomanip>
#include <iostream>
#include <ostream>
#include <sys/types.h>
#include <cassert>
#include <cstdint>
#include <cstring>
#include <iomanip>

#include "aes.h"
namespace aes {

const uint8_t SBOX[16][16] = {
	{0x63, 0xca, 0xb7, 0x04, 0x09, 0x53, 0xd0, 0x51, 0xcd, 0x60, 0xe0, 0xe7, 0xba, 0x70, 0xe1, 0x8c},
	{0x7c, 0x82, 0xfd, 0xc7, 0x83, 0xd1, 0xef, 0xa3, 0x0c, 0x81, 0x32, 0xc8, 0x78, 0x3e, 0xf8, 0xa1},
	{0x77, 0xc9, 0x93, 0x23, 0x2c, 0x00, 0xaa, 0x40, 0x13, 0x4f, 0x3a, 0x37, 0x25, 0xb5, 0x98, 0x89},
	{0x7b, 0x7d, 0x26, 0xc3, 0x1a, 0xed, 0xfb, 0x8f, 0xec, 0xdc, 0x0a, 0x6d, 0x2e, 0x66, 0x11, 0x0d},
	{0xf2, 0xfa, 0x36, 0x18, 0x1b, 0x20, 0x43, 0x92, 0x5f, 0x22, 0x49, 0x8d, 0x1c, 0x48, 0x69, 0xbf},
	{0x6b, 0x59, 0x3f, 0x96, 0x6e, 0xfc, 0x4d, 0x9d, 0x97, 0x2a, 0x06, 0xd5, 0xa6, 0x03, 0xd9, 0xe6},
	{0x6f, 0x47, 0xf7, 0x05, 0x5a, 0xb1, 0x33, 0x38, 0x44, 0x90, 0x24, 0x4e, 0xb4, 0xf6, 0x8e, 0x42},
	{0xc5, 0xf0, 0xcc, 0x9a, 0xa0, 0x5b, 0x85, 0xf5, 0x17, 0x88, 0x5c, 0xa9, 0xc6, 0x0e, 0x94, 0x68},
	{0x30, 0xad, 0x34, 0x07, 0x52, 0x6a, 0x45, 0xbc, 0xc4, 0x46, 0xc2, 0x6c, 0xe8, 0x61, 0x9b, 0x41},
	{0x01, 0xd4, 0xa5, 0x12, 0x3b, 0xcb, 0xf9, 0xb6, 0xa7, 0xee, 0xd3, 0x56, 0xdd, 0x35, 0x1e, 0x99},
	{0x67, 0xa2, 0xe5, 0x80, 0xd6, 0xbe, 0x02, 0xda, 0x7e, 0xb8, 0xac, 0xf4, 0x74, 0x57, 0x87, 0x2d},
	{0x2b, 0xaf, 0xf1, 0xe2, 0xb3, 0x39, 0x7f, 0x21, 0x3d, 0x14, 0x62, 0xea, 0x1f, 0xb9, 0xe9, 0x0f},
	{0xfe, 0x9c, 0x71, 0xeb, 0x29, 0x4a, 0x50, 0x10, 0x64, 0xde, 0x91, 0x65, 0x4b, 0x86, 0xce, 0xb0},
	{0xd7, 0xa4, 0xd8, 0x27, 0xe3, 0x4c, 0x3c, 0xff, 0x5d, 0x5e, 0x95, 0x7a, 0xbd, 0xc1, 0x55, 0x54},
	{0xab, 0x72, 0x31, 0xb2, 0x2f, 0x58, 0x9f, 0xf3, 0x19, 0x0b, 0xe4, 0xae, 0x8b, 0x1d, 0x28, 0xbb},
	{0x76, 0xc0, 0x15, 0x75, 0x84, 0xcf, 0xa8, 0xd2, 0x73, 0xdb, 0x79, 0x08, 0x8a, 0x9e, 0xdf, 0x16}
};

const uint8_t INV_SBOX[16][16] = {
	{0x52, 0x7c, 0x54, 0x08, 0x72, 0x6c, 0x90, 0xd0, 0x3a, 0x96, 0x47, 0xfc, 0x1f, 0x60, 0xa0, 0x17},
	{0x09, 0xe3, 0x7b, 0x2e, 0xf8, 0x70, 0xd8, 0x2c, 0x91, 0xac, 0xf1, 0x56, 0xdd, 0x51, 0xe0, 0x2b},
	{0x6a, 0x39, 0x94, 0xa1, 0xf6, 0x48, 0xab, 0x1e, 0x11, 0x74, 0x1a, 0x3e, 0xa8, 0x7f, 0x3b, 0x04},
	{0xd5, 0x82, 0x32, 0x66, 0x64, 0x50, 0x00, 0x8f, 0x41, 0x22, 0x71, 0x4b, 0x33, 0xa9, 0x4d, 0x7e},
	{0x30, 0x9b, 0xa6, 0x28, 0x86, 0xfd, 0x8c, 0xca, 0x4f, 0xe7, 0x1d, 0xc6, 0x88, 0x19, 0xae, 0xba},
	{0x36, 0x2f, 0xc2, 0xd9, 0x68, 0xed, 0xbc, 0x3f, 0x67, 0xad, 0x29, 0xd2, 0x07, 0xb5, 0x2a, 0x77},
	{0xa5, 0xff, 0x23, 0x24, 0x98, 0xb9, 0xd3, 0x0f, 0xdc, 0x35, 0xc5, 0x79, 0xc7, 0x4a, 0xf5, 0xd6},
	{0x38, 0x87, 0x3d, 0xb2, 0x16, 0xda, 0x0a, 0x02, 0xea, 0x85, 0x89, 0x20, 0x31, 0x0d, 0xb0, 0x26},
	{0xbf, 0x34, 0xee, 0x76, 0xd4, 0x5e, 0xf7, 0xc1, 0x97, 0xe2, 0x6f, 0x9a, 0xb1, 0x2d, 0xc8, 0xe1},
	{0x40, 0x8e, 0x4c, 0x5b, 0xa4, 0x15, 0xe4, 0xaf, 0xf2, 0xf9, 0xb7, 0xdb, 0x12, 0xe5, 0xeb, 0x69},
	{0xa3, 0x43, 0x95, 0xa2, 0x5c, 0x46, 0x58, 0xbd, 0xcf, 0x37, 0x62, 0xc0, 0x10, 0x7a, 0xbb, 0x14},
	{0x9e, 0x44, 0x0b, 0x49, 0xcc, 0x57, 0x05, 0x03, 0xce, 0xe8, 0x0e, 0xfe, 0x59, 0x9f, 0x3c, 0x63},
	{0x81, 0xc4, 0x42, 0x6d, 0x5d, 0xa7, 0xb8, 0x01, 0xf0, 0x1c, 0xaa, 0x78, 0x27, 0x93, 0x83, 0x55},
	{0xf3, 0xde, 0xfa, 0x8b, 0x65, 0x8d, 0xb3, 0x13, 0xb4, 0x75, 0x18, 0xcd, 0x80, 0xc9, 0x53, 0x21},
	{0xd7, 0xe9, 0xc3, 0xd1, 0xb6, 0x9d, 0x45, 0x8a, 0xe6, 0xdf, 0xbe, 0x5a, 0xec, 0x9c, 0x99, 0x0c},
	{0xfb, 0xcb, 0x4e, 0x25, 0x92, 0x84, 0x06, 0x6b, 0x73, 0x6e, 0x1b, 0xf4, 0x5f, 0xef, 0x61, 0x7d}
};

// must be loaded into memory as indivual bytes becuse
// of x86 GOD DAMN ENDIAN FLIPPING
const uint8_t RCON[] = {
	0x01, 0x00, 0x00, 0x00, 
	0x02, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 
	0x08, 0x00, 0x00, 0x00, 
	0x10, 0x00, 0x00, 0x00, 
	0x20, 0x00, 0x00, 0x00,
	0x40, 0x00, 0x00, 0x00,
	0x80, 0x00, 0x00, 0x00,
	0x1b, 0x00, 0x00, 0x00,
	0x36, 0x00, 0x00, 0x00
};

union Block {
	uint8_t matrix[4][4];
	uint8_t bytes[16];
	uint32_t rows[4];
		
	uint32_t getCol(int c) {
		uint32_t col = 0;
		for(int r = 0; r < 4; r++)
			col |= this->matrix[r][c] << (8*r);
		return col;
	}

	Block(std::string text) {
		assert(text.length() == 16);
		std::memcpy(this, text.data(), 16);
	}

	Block(uint8_t* bytes) {
		for (int c = 0; c < 4; c++) {
			for (int r = 0; r < 4; r++) {
				this->matrix[r][c] = bytes[4*c+r];	
			}
		}
	}

	Block() {}
};

// Print the block for debugging
void dbg(const Block& b, const char* msg = nullptr) {
	if(msg)
		std::cout << "[" << msg << "]\n"; 
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 4; ++j) {
			std::cout << std::hex << std::setw(2) << std::setfill('0')
				<< static_cast<int>(b.matrix[i][j]) << " ";
		}
		std::cout << "\n";
	}
	std::cout << "\n";
}

void dbg_word(uint32_t word) {
	for(int i = 0; i < 4; i++)
		std::cout << std::hex << std::setw(2) << std::setfill('0')
			<< ((word >> (8*i)) & 0xff);
	std::cout << " ";
}

void subBytes(Block& state) {
	for (int i = 0; i < 16; i++) {
		uint8_t row = state.bytes[i] & 0x0f;
		uint8_t col = (state.bytes[i] & 0xf0) >> 4;
		state.bytes[i] = SBOX[row][col];
	}
};

void invSubBytes(Block& state) {
	for (int i = 0; i < 16; i++) {
		uint8_t row = state.bytes[i] & 0x0f;
		uint8_t col = (state.bytes[i] & 0xf0) >> 4;
		state.bytes[i] = INV_SBOX[row][col];
	}
};

void shiftRows(Block& state) {
	//TODO: Replace with rotWord()
	state.rows[1] = (state.rows[1] >> 8) | (state.rows[1] << 24);	
	state.rows[2] = (state.rows[2] >> 16) | (state.rows[2] << 16);	
	state.rows[3] = (state.rows[3] >> 24) | (state.rows[3] << 8);	
};

void invShiftRows(Block& state) {
	//TODO: Replace with rotWord()
	state.rows[1] = (state.rows[1] << 8) | (state.rows[1] >> 24);	
	state.rows[2] = (state.rows[2] << 16) | (state.rows[2] >> 16);	
	state.rows[3] = (state.rows[3] << 24) | (state.rows[3] >> 8);	
};

// Muliply byte by 2 in Galois Field (2^8) 
uint8_t xTimes(uint8_t x) {
	return (x << 1) ^ ((x & 0x80) ? 0x1b : 0x00);
}

// Muliply byte by 3 in Galois Field (2^8) 
uint8_t mult3(uint8_t x) {
	return xTimes(x) ^ x; // 3x == 2x + x (math haxs)
}

uint8_t gfMult(uint8_t a, uint8_t b) {
	uint8_t result = 0;
	uint8_t tmp = a;

	for(int i = 0; i < 8; i++) {
		if(b & 0x01) result ^= tmp;
		tmp = xTimes(tmp);
		b >>= 1;
	}
	return result;
}

void mixColumns(Block& state) {
	uint8_t s0, s1, s2, s3;
	for(int c = 0; c < 4; c++) {
		s0 = state.matrix[0][c];
		s1 = state.matrix[1][c];
		s2= state.matrix[2][c];
		s3 = state.matrix[3][c];

		state.matrix[0][c] = xTimes(s0) ^ mult3(s1) ^ s2 ^ s3;
		state.matrix[1][c] = s0 ^ xTimes(s1) ^ mult3(s2) ^ s3;
		state.matrix[2][c] = s0 ^ s1 ^ xTimes(s2) ^ mult3(s3);
		state.matrix[3][c] = mult3(s0) ^ s1 ^ s2 ^ xTimes(s3);
	}
};


void invMixColumns(Block& state) {
	uint8_t s0, s1, s2, s3;
	for(int c = 0; c < 4; c++) {
		s0 = state.matrix[0][c];
		s1 = state.matrix[1][c];
		s2= state.matrix[2][c];
		s3 = state.matrix[3][c];

		state.matrix[0][c] = 
			gfMult(s0, 0x0e) ^ gfMult(s1, 0x0b) ^ gfMult(s2, 0x0d) ^ gfMult(s3, 0x09);
		state.matrix[1][c] = 
			gfMult(s0, 0x09) ^ gfMult(s1, 0x0e) ^ gfMult(s2, 0x0b) ^ gfMult(s3, 0x0d);
		state.matrix[2][c] = 
			gfMult(s0, 0x0d) ^ gfMult(s1, 0x09) ^ gfMult(s2, 0x0e) ^ gfMult(s3, 0x0b);
		state.matrix[3][c] = 
			gfMult(s0, 0x0b) ^ gfMult(s1, 0x0d) ^ gfMult(s2, 0x09) ^ gfMult(s3, 0x0e);
	}
};

void addRoundKey(Block& state, const Block& key) {
	for(int i = 0; i < 16; i++) {
		state.bytes[i] = state.bytes[i] ^ key.bytes[i];
	}
};

uint32_t subWord(uint32_t w) {
	uint32_t sub = 0;
	for(int i = 0; i < 4; i++) {
		uint8_t byte = (w >> (i*8)) & 0xff;
		uint8_t row = byte & 0x0f;
		uint8_t col = (byte & 0xf0) >> 4;
		sub = sub | (SBOX[row][col] << (i*8));
	}
	return sub;
};

uint32_t rotWord(uint32_t w) {
	return w = (w >> 8) | (w << 24);	
};

Block* keyExpansion(Block key, int Nr, int Nk) {
	uint32_t* w = new uint32_t[4*(Nr+1)];

	int i = 0;
	while(i < Nk) {
		w[i] = key.getCol(i);	
		i++;
	}

	while(i <= 4*Nr+3) {
		uint32_t temp = w[i-1];

		if(i % Nk == 0) {
			temp = rotWord(temp);
			temp = subWord(temp);
			temp = temp ^ ((uint32_t*)RCON)[i / Nk - 1];
		} else if(Nk > 6 && i % Nk == 4) {
			temp = subWord(temp);	
		}
		
		w[i] = w[i-Nk] ^ temp;
		i++;
	}
	//TODO: Elimate the need fot this ugly thing
	Block* block_w = new Block[Nr+1];
	uint8_t* bytes_w = (uint8_t*)w;
	for(int i = 0; i < Nr+1; i++) {
		block_w[i] = Block(bytes_w+(i*16));	
	}
	delete[] w;
	return block_w;
};

Block cipher(Block state, int Nr, Block* w) {
	// Pre-round
	addRoundKey(state, w[0]);

	// Round 0 to Nr-1
	for (int round = 1; round < Nr; round++) {
		subBytes(state);
		shiftRows(state);
		mixColumns(state);
		addRoundKey(state, w[round]);
	}

	// Last round
	subBytes(state);
	shiftRows(state);
	addRoundKey(state, w[Nr]);

	return state;
};

Block invCipher(Block state, int Nr, Block* w) {
	// Pre-round
	addRoundKey(state, w[Nr]);

	// Round 0 to Nr-1
	for (int round = Nr - 1; round > 0; round--) {
		invShiftRows(state);
		invSubBytes(state);
		addRoundKey(state, w[round]);
		invMixColumns(state);
	}

	// Last round
	invShiftRows(state);
	invSubBytes(state);
	addRoundKey(state, w[0]);

	return state;
};

std::string encrypt(std::string input, std::string key) {
	int Nr = 10;
	int Nk = 4;
	Block blockInput(input);	
	Block blockKey(key);	
	Block* w = keyExpansion(blockKey,Nr, Nk);
	Block blockOutput = cipher(blockInput, Nr, w);
	std::string output(reinterpret_cast<char*>(&blockOutput), 16);
	return output;
}

std::string decrypt(std::string input, std::string key) {
	int Nr = 10;
	int Nk = 4;
	Block blockInput(input);	
	Block blockKey(key);	
	Block* w = keyExpansion(blockKey,Nr, Nk);
	Block blockOutput = invCipher(blockInput, Nr, w);
	std::string output(reinterpret_cast<char*>(&blockOutput), 16);
	return output;
}
}
