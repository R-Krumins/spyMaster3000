#include <cstdint>
#include <gtest/gtest.h>
#include "../src/core/algos/aes.cpp"
#include "../src/util/util.cpp"

using namespace aes;
TEST(aes128, singleBlock) {
	unsigned char expectedBytes[16] = {
		0x39, 0x25, 0x84, 0x1d,
		0x02, 0xdc, 0x09, 0xfb,
		0xdc, 0x11, 0x85, 0x97,
		0x19, 0x6a, 0x0b, 0x32
	};

	unsigned char keyBytes[16] = {
		0x2b, 0x28, 0xab, 0x09,
		0x7e, 0xae, 0xf7, 0xcf,
		0x15, 0xd2, 0x15, 0x4f,
		0x16, 0xa6, 0x88, 0x3c
	};

	unsigned char inputBytes[16] = {
		0x32, 0x88, 0x31, 0xe0,
		0x43, 0x5a, 0x31, 0x37,
		0xf6, 0x30, 0x98, 0x07,
		0xa8, 0x8d, 0xa2, 0x34,
	};

	std::string expected((char*)expectedBytes, 16);
	std::string key((char*)keyBytes, 16);
	std::string input((char*)inputBytes, 16);
	std::cout << "Input len " << input.length() << "\n";

	std::string result = aes::encrypt(input, key);

	EXPECT_EQ(result, expected);
}

TEST(aes128, cumDump) {
	unsigned char expectedBytes[16] = {
		0x39, 0x25, 0x84, 0x1d,
		0x02, 0xdc, 0x09, 0xfb,
		0xdc, 0x11, 0x85, 0x97,
		0x19, 0x6a, 0x0b, 0x32
	};

	unsigned char keyBytes[16] = {
		0x2b, 0x28, 0xab, 0x09,
		0x7e, 0xae, 0xf7, 0xcf,
		0x15, 0xd2, 0x15, 0x4f,
		0x16, 0xa6, 0x88, 0x3c
	};

	unsigned char inputBytes[16] = {
		0x32, 0x88, 0x31, 0xe0,
		0x43, 0x5a, 0x31, 0x37,
		0xf6, 0x30, 0x98, 0x07,
		0xa8, 0x8d, 0xa2, 0x34,
	};

	Block input(inputBytes); 
	Block key(keyBytes); 
	Block expected(keyBytes); 


	Block* w = keyExpansion(key, 10, 4);
	Block result = aes::cipher(input, 10, w);

	EXPECT_EQ(*result.bytes, *expected.bytes);
	
}

TEST(aes128, buttSex) {
	std::string input = "0123456789abcdef";
	std::string key = "superDuperSecret";
	std::string expected = util::hexToASCII("145659F4B6B9C671B75829AFE7E726E7");

	std::string result = aes::encrypt(input, key);
	EXPECT_EQ(result, expected);
}
